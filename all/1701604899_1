package all;

import java.util.*;
import java.util.stream.Stream;

public class Main {

    public static void main(String[] args) {
        Scanner in = new Scanner(System.in);

        final int n = in.nextInt();
        List<Member> members = new ArrayList<>();
        in.nextLine();
        for (int i = 0; i < n; i++) {
            String[] split = in.nextLine().split(" ");
            members.add(
                    new Member(
                            Integer.parseInt(split[0]),
                            split[1],
                            Integer.parseInt(split[2]),
                            Integer.parseInt(split[3]),
                            Integer.parseInt(split[4])
                    )
            );
        }
        int m = in.nextInt();
        String[] olympyads = new String[m];
        in.nextLine();
        for (int i = 0; i < m; i++) {
            olympyads[i] = in.nextLine();
        }
        Stream<Member> membersSortedByScore = members.stream().sorted();
        for (String olympyad : olympyads) {
            if (olympyad.equals("IOI")) {
                System.out.println("IOI");
                Stream<Member> limit = members.stream().sorted().limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("CEOI")) {
                System.out.println("CEOI");
                Stream<Member> limit = members.stream().sorted().limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("EGOI")) {
                System.out.println("EGOI");
                Stream<Member> limit = members.stream().sorted().filter(member -> member.getGender().equals("female")).limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("EJOI")) {
                System.out.println("EJOI");
                Stream<Member> limit = members.stream().sorted().filter(member -> member.getAge() < 15).limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("BaltOI")) {
                System.out.println("BaltOI");
                Stream<Member> limit = members.stream().sorted().limit(6);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("BalkOI")) {
                System.out.println("BalkOI");
                Stream<Member> limit = members.stream().sorted().filter(member -> member.getGrade() != 11).limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
            if (olympyad.equals("JBOI")) {
                System.out.println("JBOI");
                Stream<Member> limit = members.stream().sorted().filter(member -> member.getGrade() != 11 || member.getGrade() != 10).limit(4);
                limit.forEach(member -> System.out.println(member.getId()));
                System.out.println(" ");
            }
        }
    }

    static class Member implements Comparable<Member> {
        private int id;
        private String gender;
        private int grade;
        private int age;
        private int score;

        public Member(int id, String gender, int grade, int age, int score) {
            this.id = id;
            this.gender = gender;
            this.grade = grade;
            this.age = age;
            this.score = score;
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getGender() {
            return gender;
        }

        public void setGender(String gender) {
            this.gender = gender;
        }

        public int getGrade() {
            return grade;
        }

        public void setGrade(int grade) {
            this.grade = grade;
        }

        public int getAge() {
            return age;
        }

        public void setAge(int age) {
            this.age = age;
        }

        public int getScore() {
            return score;
        }

        public void setScore(int score) {
            this.score = score;
        }

        @Override
        public int compareTo(Member o) {
            if (this.score > o.getScore()) {
                return -1;
            } else if (this.score < o.getScore()) return 1;
            return 0;
        }
    }
}
